# Generated by Django 5.1.7 on 2025-06-03 12:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('Student', 'Student'), ('Lecturer', 'Lecturer'), ('Admin', 'Admin')], default='Student', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='%(app_label)s_%(class)s_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='%(app_label)s_%(class)s_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'Lecturer'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='lecturer_profile', serialize=False, to='webapp.user')),
                ('department', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'lecturer',
                'verbose_name_plural': 'lecturers',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(limit_choices_to={'user_type': 'Student'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student_profile', serialize=False, to='webapp.user')),
                ('program', models.CharField(max_length=100)),
                ('parent_email', models.EmailField(blank=True, help_text="Parent's email address.", max_length=254, null=True)),
                ('parent_phone_num', models.CharField(blank=True, help_text="Parent's phone number.", max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_code', models.CharField(help_text='Unique code for the course.', max_length=20, primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=255)),
                ('lecturer', models.ForeignKey(blank=True, help_text='The primary lecturer responsible for this course.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses_taught', to='webapp.lecturer')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'ordering': ['course_code'],
            },
        ),
        migrations.CreateModel(
            name='ClassSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday')], help_text='Day of the week the session is held.', max_length=10)),
                ('start_time', models.TimeField(help_text='Start time of the session.')),
                ('end_time', models.TimeField(help_text='End time of the session.')),
                ('room', models.CharField(help_text='Physical room or virtual link for the session.', max_length=50)),
                ('course', models.ForeignKey(help_text='The course this session belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='class_sessions', to='webapp.course')),
                ('lecturer', models.ForeignKey(help_text='The lecturer conducting this session.', on_delete=django.db.models.deletion.CASCADE, related_name='class_sessions_conducted', to='webapp.lecturer')),
            ],
            options={
                'verbose_name': 'class session',
                'verbose_name_plural': 'class sessions',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(auto_now_add=True, help_text='Date of enrollment.')),
                ('course', models.ForeignKey(help_text='The course being enrolled in.', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='webapp.course')),
                ('student', models.ForeignKey(help_text='The student enrolled.', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='webapp.student')),
            ],
            options={
                'verbose_name': 'enrollment',
                'verbose_name_plural': 'enrollments',
                'ordering': ['-enrollment_date'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('Present', 'Present'), ('Absent', 'Absent'), ('Late', 'Late')], help_text='Attendance status (Present, Absent, Late).', max_length=20)),
                ('image_data', models.ImageField(blank=True, help_text='Optional image data for attendance verification.', null=True, upload_to='attendance_images/')),
                ('session', models.ForeignKey(help_text='The class session for which attendance is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='webapp.classsession')),
                ('student', models.ForeignKey(help_text='The student whose attendance is being recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='webapp.student')),
            ],
            options={
                'verbose_name': 'attendance',
                'verbose_name_plural': 'attendance',
                'ordering': ['-date_time'],
                'unique_together': {('student', 'session')},
            },
        ),
    ]
